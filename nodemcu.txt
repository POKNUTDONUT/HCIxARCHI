#include <ESP8266WiFi.h>
#include <ESPAsyncWebServer.h>
#include <ArduinoJson.h>
#include <SoftwareSerial.h>

// Access Point Configuration
const char* ssid = "FRISHKO-Device";
const char* password = "frishko123";

// Web Server
AsyncWebServer server(80);

// Communication with Arduino
SoftwareSerial arduino(4, 5); // RX=D2(GPIO4), TX=D1(GPIO5)

// Data variables
int currentFreshness = 0;
int currentGasValue = 0;
bool currentAlert = false;
unsigned long lastDataReceived = 0;
bool deviceConnected = false;

void setup() {
  Serial.begin(115200);
  arduino.begin(9600);
  
  // Setup Access Point
  WiFi.softAP(ssid, password);
  IPAddress IP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(IP);
  
  // Setup web server
  setupWebServer();
  server.begin();
  
  Serial.println("FRISHKO IoT Server Started");
  
  // Request initial status from Arduino
  arduino.println("GET_STATUS");
}

void loop() {
  // Read data from Arduino
  if (arduino.available()) {
    String data = arduino.readString();
    data.trim();
    parseArduinoData(data);
  }
  
  // Check connection status
  if (millis() - lastDataReceived > 10000) {
    deviceConnected = false;
  } else {
    deviceConnected = true;
  }
  
  delay(100);
}

void setupWebServer() {
  // Serve main page
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(200, "text/html", getMainPageHTML());
  });
  
  // Serve alert page
  server.on("/alert", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(200, "text/html", getAlertPageHTML());
  });
  
  // API to get current sensor data
  server.on("/api/data", HTTP_GET, [](AsyncWebServerRequest *request){
    String json = "{";
    json += "\"freshness\":" + String(currentFreshness) + ",";
    json += "\"gasValue\":" + String(currentGasValue) + ",";
    json += "\"alert\":" + String(currentAlert) + ",";
    json += "\"connected\":" + String(deviceConnected) + ",";
    json += "\"timestamp\":" + String(millis());
    json += "}";
    
    request->send(200, "application/json", json);
  });
  
  // API to reset alert
  server.on("/api/reset", HTTP_POST, [](AsyncWebServerRequest *request){
    arduino.println("RESET_ALERT");
    currentAlert = false;
    request->send(200, "application/json", "{\"status\":\"reset\"}");
  });
  
  // API to calibrate sensor
  server.on("/api/calibrate", HTTP_POST, [](AsyncWebServerRequest *request){
    arduino.println("CALIBRATE");
    request->send(200, "application/json", "{\"status\":\"calibrating\"}");
  });
  
  // 404 handler
  server.onNotFound([](AsyncWebServerRequest *request){
    request->send(404, "text/plain", "Page not found");
  });
}

void parseArduinoData(String data) {
  Serial.println("Raw data received: " + data); // DEBUG LINE
  
  // Parse JSON data from Arduino
  DynamicJsonDocument doc(200);
  DeserializationError error = deserializeJson(doc, data);
  
  if (!error) {
    currentFreshness = doc["freshness"];
    currentGasValue = doc["gas"];
    currentAlert = doc["alert"];
    lastDataReceived = millis();
    
    Serial.println("Data parsed - Freshness: " + String(currentFreshness) + 
                   " Gas: " + String(currentGasValue) + 
                   " Alert: " + String(currentAlert));
  } else {
    Serial.println("JSON parse error: " + String(error.c_str())); // DEBUG LINE
  }
}

String getMainPageHTML() {
  String html = "<!DOCTYPE html><html><head>";
  html += "<title>FRISHKO Device</title>";
  html += "<meta name='viewport' content='width=device-width, initial-scale=1'>";
  html += "<style>";
  html += "body { font-family: Arial; text-align: center; background: #001b3d; color: white; padding: 20px; }";
  html += ".container { max-width: 400px; margin: 0 auto; background: rgba(255,255,255,0.1); padding: 30px; border-radius: 20px; }";
  html += ".title { font-size: 36px; margin-bottom: 20px; }";
  html += ".freshness { font-size: 64px; font-weight: bold; margin: 30px 0; }";
  html += ".status { font-size: 18px; margin: 20px 0; padding: 15px; background: rgba(255,255,255,0.1); border-radius: 10px; }";
  html += ".btn { padding: 15px 25px; margin: 10px; border: none; border-radius: 25px; font-size: 16px; cursor: pointer; text-decoration: none; display: inline-block; }";
  html += ".btn-primary { background: #4CAF50; color: white; }";
  html += ".btn-warning { background: #FF9800; color: white; }";
  html += ".btn-alert { background: #F44336; color: white; animation: pulse 2s infinite; }";
  html += "@keyframes pulse { 0% { transform: scale(1); } 50% { transform: scale(1.05); } 100% { transform: scale(1); } }";
  html += ".connection { position: absolute; top: 20px; right: 20px; width: 12px; height: 12px; border-radius: 50%; }";
  html += ".connected { background: #4CAF50; }";
  html += ".disconnected { background: #F44336; }";
  html += "</style></head><body>";
  html += "<div class='connection' id='status'></div>";
  html += "<div class='container'>";
  html += "<div class='title'>FRISHKO</div>";
  html += "<div class='freshness' id='freshness'>--</div>";
  html += "<div class='status' id='statusText'>Connecting...</div>";
  html += "<button class='btn btn-primary' onclick='resetAlert()'>Reset Alert</button>";
  html += "<button class='btn btn-warning' onclick='calibrate()'>Calibrate</button>";
  html += "<a href='/alert' class='btn btn-alert' id='alertBtn' style='display:none;'>VIEW ALERT</a>";
  html += "</div>";
  html += "<script>";
  html += "function updateData() {";
  html += "fetch('/api/data').then(r => r.json()).then(data => {";
  html += "document.getElementById('freshness').textContent = data.freshness + '%';";
  html += "var status = document.getElementById('status');";
  html += "var statusText = document.getElementById('statusText');";
  html += "var alertBtn = document.getElementById('alertBtn');";
  html += "var freshness = document.getElementById('freshness');";
  html += "if (data.connected) {";
  html += "status.className = 'connection connected';";
  html += "if (data.freshness >= 75) { statusText.textContent = 'Fish Status: FRESH'; freshness.style.color = '#4CAF50'; }";
  html += "else if (data.freshness >= 60) { statusText.textContent = 'Fish Status: GOOD'; freshness.style.color = '#8BC34A'; }";
  html += "else if (data.freshness >= 40) { statusText.textContent = 'Fish Status: FAIR'; freshness.style.color = '#FFC107'; }";
  html += "else if (data.freshness >= 25) { statusText.textContent = 'Fish Status: POOR'; freshness.style.color = '#FF9800'; }";
  html += "else { statusText.textContent = 'Fish Status: SPOILED'; freshness.style.color = '#F44336'; }";
  html += "} else { status.className = 'connection disconnected'; statusText.textContent = 'Device disconnected'; }";
  html += "if (data.alert) { alertBtn.style.display = 'inline-block'; } else { alertBtn.style.display = 'none'; }";
  html += "});";
  html += "}";
  html += "function resetAlert() { fetch('/api/reset', {method: 'POST'}); }";
  html += "function calibrate() { fetch('/api/calibrate', {method: 'POST'}); alert('Calibration started'); }";
  html += "setInterval(updateData, 2000);";
  html += "updateData();";
  html += "</script></body></html>";
  return html;
}

String getAlertPageHTML() {
  String html = "<!DOCTYPE html><html><head>";
  html += "<title>FRISHKO Alert</title>";
  html += "<meta name='viewport' content='width=device-width, initial-scale=1'>";
  html += "<style>";
  html += "body { font-family: Arial; text-align: center; background: #FF5722; color: white; padding: 20px; min-height: 100vh; display: flex; align-items: center; justify-content: center; }";
  html += ".container { max-width: 350px; background: rgba(255,255,255,0.95); padding: 40px; border-radius: 20px; color: #333; }";
  html += ".icon { width: 100px; height: 100px; background: #FF5722; border-radius: 50%; display: flex; align-items: center; justify-content: center; margin: 0 auto 20px; }";
  html += ".icon-text { color: white; font-size: 50px; font-weight: bold; }";
  html += ".title { font-size: 28px; font-weight: bold; color: #D32F2F; margin-bottom: 15px; }";
  html += ".message { font-size: 16px; margin-bottom: 30px; line-height: 1.5; }";
  html += ".btn { padding: 15px 25px; margin: 10px; border: none; border-radius: 25px; font-size: 16px; cursor: pointer; text-decoration: none; display: inline-block; font-weight: bold; }";
  html += ".btn-primary { background: #FF5722; color: white; }";
  html += ".btn-secondary { background: #607D8B; color: white; }";
  html += "</style></head><body>";
  html += "<div class='container'>";
  html += "<div class='icon'><div class='icon-text'>!</div></div>";
  html += "<div class='title'>FISH NOT FRESH!</div>";
  html += "<div class='message'>The fish sample shows high levels of spoilage gases.<br><br><strong>Do not consume this fish</strong> as it may pose serious health risks.</div>";
  html += "<button class='btn btn-primary' onclick='resetAndReturn()'>RESET ALERT</button>";
  html += "<a href='/' class='btn btn-secondary'>RETURN TO MONITOR</a>";
  html += "</div>";
  html += "<script>";
  html += "function resetAndReturn() { fetch('/api/reset', {method: 'POST'}).then(() => { window.location.href = '/'; }); }";
  html += "</script></body></html>";
  return html;
}